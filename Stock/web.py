import streamlit as st
from annotated_text import annotated_text
import altair as alt
import pandas as pd
from functions import load_stock_data, calculate_trend, calculate_macd, calculate_rsi, calculate_parabolic_sar

# Set page to wide
st.set_page_config(layout="wide")

# Sidebar
with st.sidebar:
    st.title("**:money_with_wings: :orange[Set] Thailand :green[Stock]**")
    select_stock = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô", ("ADVANC", "KBANK"), index=0)

stock_name, company_name, df = load_stock_data("Stock/Stock-Price.xlsx", select_stock)

# Get the first row (latest data)
latest_row = df.iloc[0]
closing_price_str = f"{latest_row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î']:.2f} Baht"
change_str = f"{latest_row['‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á']:+.2f}"
change_percent_str = f"{latest_row['‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)']:+.2f}%"
volumn_str = f"{latest_row['‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)']:.2f}"
value_str = f"{latest_row['‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)']:.2f}"
low_price = f"{latest_row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î']:.2f}"
high_price = f"{latest_row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î']:.2f}"

# Sidebar
with st.sidebar:
    annotated_text((f"**{stock_name}**", f"{company_name}"))
    st.metric("**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Latest Closing Price)**", closing_price_str, f"{change_str} ({change_percent_str})", border=True)
    p1, p2 = st.columns(2)
    with p1: st.subheader(f"**‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: :red[{low_price}]**")
    with p2: st.subheader(f"**‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: :green[{high_price}]**")
    st.metric("**‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ ('000 ‡∏´‡∏∏‡πâ‡∏ô)**", volumn_str, border=True)
    st.metric("**‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ (‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)**", value_str, border=True)

# Main content
with st.container(border=True):
    st.title(f"**:green[{stock_name}]**")
    st.subheader(f":blue[{company_name}]")

#Graph of Price
st.header(":orange[‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á**]")
chart_df = df[["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"]].copy()
y_min, y_max = chart_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"].min(), chart_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"].max()

line_chart = alt.Chart(chart_df).mark_line(point=False, color="green").encode(
    x=alt.X("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T", title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", axis=alt.Axis(format="%b", tickCount="month")),
    y=alt.Y("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î:Q", scale=alt.Scale(domain=[y_min, y_max]), title="‡∏£‡∏≤‡∏Ñ‡∏≤"),
    tooltip=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"]
).properties(width=700, height=400)

tab1, tab2 = st.tabs(["üìà Price Chart", "üìâ Price Trend :orange-badge[:material/star: New Feature]"])

# Show chart in TAB1
df_sar = calculate_parabolic_sar(df)

sar_line = alt.Chart(df_sar).mark_circle(color="red", size=20).encode(
    x=alt.X("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T"),
    y=alt.Y("Parabolic_SAR:Q"),
    tooltip=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "Parabolic_SAR"]
)

price_with_sar = (line_chart + sar_line).properties(title="üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° Parabolic SAR")
tab1.altair_chart(price_with_sar, use_container_width=True)

#Trend of Price
df_trend = calculate_trend(df)
y_min, y_max = df_trend["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"].min(), df_trend["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"].max()

base = alt.Chart(df_trend).encode(
    x=alt.X("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T", title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", axis=alt.Axis(format="%b", tickCount="month"))
)
actual_line = base.mark_line(color="blue").encode(
    y=alt.Y("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î:Q", title="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", scale=alt.Scale(domain=[y_min, y_max])),
    tooltip=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"]
)
trend_line = base.mark_line(color="red", strokeDash=[5, 5]).encode(y="Trend:Q")
chart = (actual_line + trend_line).properties(title="üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°)", width=800, height=400)

# Show chart in TAB2
with tab2:
    with st.expander("üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"):
        st.altair_chart(chart, use_container_width=True)

    with st.expander("üìâ MACD Indicator"):
        df_macd = calculate_macd(df_trend)
        macd_chart = alt.Chart(df_macd).transform_fold(
            ["MACD", "Signal"]
        ).mark_line().encode(
            x="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T",
            y="value:Q",
            color="key:N"
        ).properties(width=800, height=300)
        st.altair_chart(macd_chart, use_container_width=True)

    with st.expander("üìä RSI Indicator"):
        df_rsi = calculate_rsi(df_trend)
        rsi_chart = alt.Chart(df_rsi).mark_line(color="orange").encode(
            x="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T",
            y=alt.Y("RSI:Q", scale=alt.Scale(domain=[0, 100]))
        ).properties(width=800, height=300)
        st.altair_chart(rsi_chart, use_container_width=True)

# Table of Price Details
st.header(":orange[‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á] :violet-badge[:material/star: New Feature]")
col1, col2, col3, col4 = st.columns(4)

# Column selection using checkboxes
with col1:
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    popover = st.popover("Customize")
    opp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", True)
    mxp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", True)
    lwp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", True)
    avp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", True)
    clp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", True)
    chg = popover.checkbox("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", True)
    cgp = popover.checkbox("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (%)", True)
    vol = popover.checkbox("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì ('000 ‡∏´‡∏∏‡πâ‡∏ô)", True)
    val = popover.checkbox("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ (‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)", True)
    sti = popover.checkbox("SET Index", True)
    scp = popover.checkbox("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á SET (%)", True)

# Number of rows to show
with col4:
    option = st.selectbox("‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", ("10", "20", "50", "100", "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"), index=1)

# Determine selected columns
selected_columns = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"]
if opp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î")
if mxp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
if lwp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")
if avp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢")
if clp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î")
if chg: selected_columns.append("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")
if cgp: selected_columns.append("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)")
if vol: selected_columns.append("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)")
if val: selected_columns.append("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)")
if sti: selected_columns.append("SET Index")
if scp: selected_columns.append("SET ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)")

# Filter rows and Display
filtered_df = df[selected_columns] if option == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" else df[selected_columns].head(int(option))
if not filtered_df.empty:
    st.dataframe(filtered_df)