import streamlit as st
import pandas as pd
import altair as alt
from annotated_text import annotated_text
from sklearn.linear_model import LinearRegression

st.set_page_config(layout="wide")

with st.sidebar:
    st.title("**:money_with_wings: :orange[Set] Thailand :green[Stock]**")
    select_stock = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô",
        ("ADVANC", "KBANK"),
        index=0,
        placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    )

meta_df = pd.read_excel("Stock-Price.xlsx", sheet_name=select_stock, nrows=2, header=None)
stock_name = meta_df.iloc[0, 0]  
company_name = meta_df.iloc[1, 0] 

# Define Stock-Price file location
df = pd.read_excel("Stock-Price.xlsx", sheet_name="ADVANC", skiprows=3)

# Rename columns
df.columns = [
    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î",
    "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)", "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)", "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)",
    "SET Index", "SET ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)"
]

# Thai month conversion
thai_months = {
    "‡∏°.‡∏Ñ.": "01", "‡∏Å.‡∏û.": "02", "‡∏°‡∏µ.‡∏Ñ.": "03", "‡πÄ‡∏°.‡∏¢.": "04",
    "‡∏û.‡∏Ñ.": "05", "‡∏°‡∏¥.‡∏¢.": "06", "‡∏Å.‡∏Ñ.": "07", "‡∏™.‡∏Ñ.": "08",
    "‡∏Å.‡∏¢.": "09", "‡∏ï.‡∏Ñ.": "10", "‡∏û.‡∏¢.": "11", "‡∏ò.‡∏Ñ.": "12"
}

def convert_thai_date(thai_date_str):
    for th, num in thai_months.items():
        if th in thai_date_str:
            parts = thai_date_str.replace(",", "").split()
            if len(parts) == 3:
                day, month_th, year_th = parts
                month = thai_months.get(month_th)
                year = int(year_th) - 543
                return f"{year}-{month}-{int(day):02d}"
    return None

# Clean and convert date column
df = df[~df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].isna() & ~df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].astype(str).str.contains("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")]
df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].astype(str).apply(convert_thai_date)
df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors="coerce")
df = df.dropna()
df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.date

# Get the first row (latest data)
latest_row = df.iloc[0]
closing_price_str = f"{latest_row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î']:.2f} Baht"
change_str = f"{latest_row['‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á']:+.2f}"
change_percent_str = f"{latest_row['‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)']:+.2f}%"
volumn_str = f"{latest_row['‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)']:.2f}"
value_str = f"{latest_row['‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)']:.2f}"
low_price = f"{latest_row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î']:.2f}"
high_price = f"{latest_row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î']:.2f}"

# Sidebar
with st.sidebar:

    annotated_text(
        (f"**{stock_name}**", f"{company_name}"),
    )
    st.metric(
        label="**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Latest Closing Price)**",
        value=closing_price_str,
        delta=f"{change_str} ({change_percent_str})",
        border=True
    )

    p1, p2 = st.columns(2)
    with p1:
        st.subheader(f"**‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: :red[{low_price}]**")
    with p2:
        st.subheader(f"**‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: :green[{high_price}]**")
    st.metric(
        label="**‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ ('000 ‡∏´‡∏∏‡πâ‡∏ô)**",
        value=volumn_str,
        border=True
    )
    st.metric(
        label="**‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ (‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)**",
        value=value_str,
        border=True
    )

# Main content
with st.container(border=True):
    st.title(f"**:green[{stock_name}]**")
    st.subheader(f":blue[{company_name}]")

st.header(":orange[‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á**]")
# Prepare data
chart_df = df[["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"]].copy()

# Calculate Y-axis limits
y_min = chart_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"].min() 
y_max = chart_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"].max() 

# Build the chart
line_chart = alt.Chart(chart_df).mark_line(point=False,color="green").encode(
    x=alt.X("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T", title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", axis=alt.Axis(format="%b", tickCount="month")),
    y=alt.Y("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î:Q", scale=alt.Scale(domain=[y_min, y_max]), title="‡∏£‡∏≤‡∏Ñ‡∏≤"),
    tooltip=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"]
).properties(
    width=700,
    height=400,
)

tab1, tab2 = st.tabs(["üìà Price Chart", "üìâ Price Trend"])

# Show chart
tab1.altair_chart(line_chart, use_container_width=True)

# Sort and convert date
df_sorted = df.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà").copy()
df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"])  # Ensure datetime64[ns]

# Prepare regression
X = df_sorted["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].map(pd.Timestamp.toordinal).values.reshape(-1, 1)
y = df_sorted["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"].values
model = LinearRegression()
model.fit(X, y)
df_sorted["Trend"] = model.predict(X)

# Calculate Y-axis limits from ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î and ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
y_min = df_sorted["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"].min()
y_max = df_sorted["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"].max()

# Chart setup
base = alt.Chart(df_sorted).encode(
    x=alt.X("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T", title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", axis=alt.Axis(format="%b", tickCount="month"))  # Month only
)

actual_line = base.mark_line(color="blue").encode(
    y=alt.Y("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î:Q", title="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", scale=alt.Scale(domain=[y_min, y_max])),
    tooltip=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î"]
)

trend_line = base.mark_line(color="red", strokeDash=[5, 5]).encode(
    y=alt.Y("Trend:Q")
)

# Combine chart
chart = (actual_line + trend_line).properties(
    title="üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°)",
    width=800,
    height=400
)

# Show in Streamlit
tab2.altair_chart(chart, use_container_width=True)

st.header(":orange[‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á] :violet-badge[:material/star: New Feature]")

col1, col2, col3, col4 = st.columns(4)

# Column selection using checkboxes
with col1:
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    popover = st.popover("Customize")
    opp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", True)
    mxp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", True)
    lwp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", True)
    avp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", True)
    clp = popover.checkbox("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î", True)
    chg = popover.checkbox("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", True)
    cgp = popover.checkbox("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (%)", True)
    vol = popover.checkbox("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì ('000 ‡∏´‡∏∏‡πâ‡∏ô)", True)
    val = popover.checkbox("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ (‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)", True)
    sti = popover.checkbox("SET Index", True)
    scp = popover.checkbox("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á SET (%)", True)

# Number of rows to show
with col4:
    option = st.selectbox(
        "‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        ("10", "20", "50", "100", "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"),
        index=1,
        placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    )

# Determine selected columns
selected_columns = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"]
if opp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î")
if mxp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
if lwp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")
if avp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢")
if clp: selected_columns.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î")
if chg: selected_columns.append("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")
if cgp: selected_columns.append("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)")
if vol: selected_columns.append("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì(‡∏û‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô)")
if val: selected_columns.append("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤(‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)")
if sti: selected_columns.append("SET Index")
if scp: selected_columns.append("SET ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á(%)")

# Filter rows
if option == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered_df = df[selected_columns]
else:
    filtered_df = df[selected_columns].head(int(option))

# Display table
if not filtered_df.empty:
    st.dataframe(filtered_df)